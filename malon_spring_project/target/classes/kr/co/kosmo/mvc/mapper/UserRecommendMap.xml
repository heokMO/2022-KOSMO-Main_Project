<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user_recommend">
	<resultMap type="user_recommend_vo" id="user_recommend_info">
		<result column="ID" property="id"/> 
		<result column="TITLE" property="title" /> 
		<result column="CONTENT" property="content" /> 
		<result column="USER_ID" property="userID"/> 
		<result column="WRITTEN_TIME" property="writtenTime"/> 
		<result column="THUMBS_UP" property="thumbsUp"/>
	</resultMap>
	
	<select id="get_list_limit" resultMap="user_recommend_info">
		select id, title, user_id, WRITTEN_TIME, THUMBS_UP 
		from (
		select id, title, user_id, WRITTEN_TIME, THUMBS_UP 
		from RECOMMENDED_INFO
		order by ID  desc)
		<![CDATA[
		 where ROWNUM <= 16
		]]>
	</select>
	
	<select id="add_list_limit" resultMap="user_recommend_info">
		select *
		from (
			select id, title, user_id, WRITTEN_TIME, THUMBS_UP 
			from RECOMMENDED_INFO
			order by ID  desc)
		<![CDATA[
		 where ID < #{lastSongId}
		 	and ROWNUM <= 16
		]]>
	</select>
	
	<select id="get_info" resultMap="user_recommend_info">
		select ID, title, user_id, WRITTEN_TIME, THUMBS_UP, CONTENT
		from RECOMMENDED_INFO
		where id= #{userRcmId }
	</select>
	
	
	<select id="search_songs" resultType="songvo">
		select SONG_ID, SONG_TITLE, SONG_ALBUM, SONG_ARTIST 
		from SONG
		where (SONG_TITLE like '%' || #{searchWord} || '%'
			or SONG_ALBUM like '%' || #{searchWord} || '%'
			or SONG_ARTIST like '%' || #{searchWord} || '%')
  <![CDATA[ and ROWNUM <= 10]]>
        order by SONG_ID
	</select>
	
	
	<insert id="insert_play_list" parameterType="java.util.List" > 
		<foreach collection="list" item="song" open="INSERT ALL" close="SELECT * FROM SYS.DUAL" separator=" "> 
			INTO RECOMMENDED_PLAYLIST( 
				id, song_id 
			) VALUES ( 
				RECOMMENDED_INFO_SEQ.CURRVAL, #{song} 
			) 
		</foreach> 
	</insert>
	
	
	<insert id="insert_play_list_info">
		insert into RECOMMENDED_INFO (title, content, user_id) values (#{title},#{content},#{userID})
	</insert>	
	
	
	<select id="getPlayListDetail" resultType="songvo">
		select SONG_ID, SONG_TITLE, SONG_ALBUM, SONG_ARTIST, SONG_IMG, SONG_GENRE, SONG_YOUTUBE_LINK from SONG where song_id in (
		    select song_id from RECOMMENDED_PLAYLIST where id = #{userRcmId}
		) 
	</select>
	
	<delete id="deleteList">
		delete from RECOMMENDED_PLAYLIST 
		where id = #{userRcmId}
	</delete>
	
	<delete id="deleteList_info">
		delete from RECOMMENDED_INFO 
		where id = #{userRcmId}
	</delete>
	
	<delete id="deleteList_mem">
		delete from LIKE_RECOMMEND_LIST 
		where id = #{userRcmId}
	</delete>
	
	<update id="update_play_list_info">
		  UPDATE RECOMMENDED_INFO
		     SET title = #{title},
		         content = #{content}
		     WHERE id = #{id}
	</update>
	
	<insert id="insert_new_play_list" parameterType="hashmap">
		<foreach collection="_parameter.entrySet()" index="key" item="value" open="INSERT ALL" close="SELECT * FROM SYS.DUAL" separator=" "> 
			INTO RECOMMENDED_PLAYLIST( 
				id, song_id 
			) VALUES ( 
				#{value, jdbcType=INTEGER} , #{key, jdbcType=INTEGER} 
			) 
		</foreach> 
	</insert>
	
	<select id="getLikeIt" resultType="_int">
		select count(*) from LIKE_RECOMMEND_LIST where id = #{id} and mem_acc_id = #{mem_acc_id, jdbcType=VARCHAR}
	</select>
	
	<insert id="insertLike">
		insert into LIKE_RECOMMEND_LIST (mem_acc_id,id) values (#{mem_acc_id, jdbcType=VARCHAR}, #{id})
	</insert>
	
	<update id="updateThumbsUp">
		update recommended_info set thumbs_up = thumbs_up + 1 where id = #{id}
	</update>
	
	<select id="getListImg" resultType="string">
		select s.song_img, r.id from song s,RECOMMENDED_PLAYLIST r where s.song_id = r.song_id and r.id = #{id} and 
		 <![CDATA[
		 rownum <=1
		]]>
	</select>
</mapper>


